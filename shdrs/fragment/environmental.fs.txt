#version 400 core

const int NUM_LIGHT_SOURCES = 4;

in vec2 pass_textureCoords;
in vec3 surfaceNormal;
in vec3 toLightVector[NUM_LIGHT_SOURCES];       // NUM_LIGHT_SOURCES
in vec3 toCameraVector;
in float visibility;

out vec4 out_Color;

uniform sampler2D textureSampler;
uniform vec3 lightColour[NUM_LIGHT_SOURCES];    // NUM_LIGHT_SOURCES
uniform vec3 attenuation[NUM_LIGHT_SOURCES];    // NUM_LIGHT_SOURCES
uniform float shineDamper;
uniform float reflectivity;
uniform vec3 skyColour;


void main(void){

	////
	// surfaces
	vec3 unitNormal = normalize(surfaceNormal);


	////
	// camera
	vec3 unitVectorToCamera = normalize(toCameraVector);

	
	////
	// textures
	vec4 textureColour = texture(textureSampler, pass_textureCoords);
	if(textureColour.a < 0.5) {                                        // transparent objects
		discard;
	} 
	
	
	//// 
	// lighting
	vec3 totalDiffuse  = vec3(0.0);	
	vec3 totalSpecular = vec3(0.0);	
	for(int i = 0; i < NUM_LIGHT_SOURCES; i++) {                        // NUM_LIGHT_SOURCES
		
		// attenuation calculation/approximation
		float distanceToLightSource = length(toLightVector[i]);
		float attenuationFactor = ((attenuation[i].x)
								+ (attenuation[i].y * distanceToLightSource)
								+ (attenuation[i].z * pow(distanceToLightSource, 2))); 
		
		// light direction, brightness, reflectivity, specularity, and dampedness
		vec3 unitLightVector = normalize(toLightVector[i]);	
		float nDot1 = dot(unitNormal,unitLightVector);
		float brightness = max(nDot1, 0.0); 			// adjust for ambient lighting after for loop 					
		vec3 lightDirection = -unitLightVector;
		vec3 reflectedLightDirection = reflect(lightDirection, unitNormal);
		float specularFactor = dot(reflectedLightDirection, unitVectorToCamera);
		specularFactor = max(specularFactor, 0.0);
		float dampedFactor = pow(specularFactor, shineDamper);
		
		// running totals
		totalDiffuse  = (totalDiffuse 
					  + ((brightness * lightColour[i]) / attenuationFactor));		  
		totalSpecular = (totalSpecular
					  + ((dampedFactor * reflectivity * lightColour[i]) / attenuationFactor));
	}
	totalDiffuse = max(totalDiffuse, 0.2);              // 0.2 is for ambient lighting

	
	////
	// colors
	out_Color = vec4(totalDiffuse,1.0) * textureColour + vec4(totalSpecular,1.0);
	out_Color = mix(vec4(skyColour, 1.0), out_Color, visibility);

}
